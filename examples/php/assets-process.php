<?php
/**
 * Processes theme assets and returns their properties for registering and enqueuing
 *
 * Note: Do NOT edit this file to add assets. Do that in the `inc/assets-config.php` file.
 *
 * @package CassidyWP\Banyan\Functions
 * @version 1.0.0
 */

declare( strict_types = 1 );
namespace CassidyWP\Banyan;

/**
 * Processes theme assets properties
 *
 * @since 2.0.7
 * @param  array $assets_config A list of theme assets config settings.
 * @return array A list of theme assets properties.
 */
function process_theme_assets( array $assets_config ): array {
	$asset_type = $assets_config['type'];
	$asset_dir  = match ( $asset_type ) {
		'style'            => 'build/base/css',
		'script'           => 'build/base/js',
		'editor_ui_style'  => 'build/blocks/css',
		'editor_ui_script' => 'build/blocks/js',
		default            => 'build/base'
	};
	$is_script_type = in_array( $asset_type, [ 'script', 'editor_ui_script' ], true );
	$assets_props   = [];

	foreach ( $assets_config['assets'] as $asset => $properties ) {
		$asset_filename = $properties['file'];
		$asset_basename = preg_replace( '/\..+$/', '', $asset_filename );
		$asset_path     = "/{$asset_dir}/{$asset_filename}";
		$asset_handle   = $properties['handle'] ?? null;
		$asset_category = $properties['cat'] ?? null;
		$script_suffix  = 'script' === $asset_basename ? '' : '-script';
		$is_library_cat = 'library' === $asset_category;

		// If it exists, retrieves the `.asset.php` file generated by the WP build script process.
		$php_asset_path = get_theme_file_path( "/{$asset_dir}/{$asset_basename}.asset.php" );
		$php_asset      = file_exists( $php_asset_path ) ? require $php_asset_path : null;

		// Sets handle value.
		if ( $asset_handle ) {
			$handle = $asset_handle;
		} else {
			$handle = $is_library_cat ? $asset_basename : THEME_PREFIX . '-' . $asset_basename;
			$handle = $is_script_type ? $handle . $script_suffix : $handle;
		}

		// Sets media value when asset is a stylesheet.
		if ( ! $is_script_type ) {
			$media = $properties['media'] ?? 'all';
		}

		// Sets args value when asset is a script.
		if ( $is_script_type ) {
			$args = $properties['args'] ?? match ( $asset_type ) {
				'script' => [
					'in_footer' => false,
					'strategy'  => 'defer',
				],
				default => false,
			};
		}

		// Sets last property based on asset type.
		$last_prop = $is_script_type ? [
			'key'   => 'args',
			'value' => $args,
		] : [
			'key'   => 'media',
			'value' => $media,
		];

		// Sets other property values.
		$src  = get_theme_file_uri( $asset_path );
		$deps = $properties['deps'] ?? $php_asset['dependencies'] ?? [];
		$ver  = $php_asset['version'] ?? filemtime( get_theme_file_path( $asset_path ) );

		// Adds asset's properties to return array.
		$assets_props[] = [
			'handle'          => $handle,
			'src'             => $src,
			'deps'            => $deps,
			'ver'             => $ver,
			$last_prop['key'] => $last_prop['value'],
		];
	}

	return $assets_props;
}

/**
 * Processes editor stylesheets' properties
 *
 * @since 2.0.7
 * @param  array $editor_styles_config A list of editor stylesheet config settings.
 * @return array A list of Editor stylesheet properties.
 */
function process_editor_styles( array $editor_styles_config ): array {
	$asset_dir    = 'build/base/css';
	$assets_props = [];

	foreach ( $editor_styles_config as $asset => $properties ) {
		$asset_path = "{$asset_dir}/{$properties['file']}";

		// Add asset's properties to return array.
		$assets_props[] = [
			'path' => $asset_path,
		];
	}

	return $assets_props;
}

/**
 * Processes block stylesheets' properties
 *
 * No configurable options are used to generate the block stylesheets as they
 * are automatically pulled from the theme files structure.
 *
 * @since 2.0.7
 * @return array A list of block stylesheet properties.
 */
function process_block_styles(): array {
	$asset_dir    = 'build/blocks/css';
	$assets_props = [];

	// Get all block directories (namespaces).
	foreach ( glob( get_theme_file_path( $asset_dir . '\/*/' ) ) as $block_path ) {
		$block_namespace = basename( $block_path );

		// Get all blocks in each block directory (namespace).
		foreach ( glob( $block_path . '*.css' ) as $block_file_path ) {
			$block_name = basename( $block_file_path, '.css' );
			$args       = [
				'handle' => THEME_PREFIX . "-{$block_namespace}-{$block_name}",
				'src'    => get_theme_file_uri( "{$asset_dir}/{$block_namespace}/{$block_name}.css" ),
				'path'   => $block_file_path,
				'ver'    => filemtime( $block_file_path ),
			];

			// Add asset's properties to return array.
			$assets_props[] = [
				'name' => "{$block_namespace}/{$block_name}",
				'args' => $args,
			];
		}
	}

	return $assets_props;
}
